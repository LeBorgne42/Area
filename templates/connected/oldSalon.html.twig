{#{% extends 'base.html.twig' %}

{% trans_default_domain 'front_salon' %}

{% block title %}{{ 'title'|trans }}{% endblock %}

{% block body %}
    <div class="front-block display-message">
        <ul class="nav nav-tabs mt-1" id="myTab" role="tablist">
            {% set x = 0 %}
            {% for salon in salons %}
                <li class="nav-item">
                    <a class="py-2 nav-link{% if x == 0 %} active{% endif %}" id="{{ salon.getName() }}-tab" data-toggle="tab" href="#{{ salon.getName() }}" role="tab" aria-controls="{{ salon.getName() }}" aria-selected="true"><h4>{{ salon.getName() }}</h4></a>
                </li>
                {% set x = 1 %}
            {% endfor %}
        </ul>
        <div class="tab-content" id="myTabContent">
            {% set x = 0 %}
            {% for salon in salons %}
                <div class="tab-pane{% if x == 0 %} fade show active{% endif %}" id="{{ salon.getName() }}" role="tabpanel" aria-labelledby="{{ salon.getName() }}-tab">
                    <div class="chat-defil">
                        <table class="table table-striped table-bordered table-dark">
                            <tbody class="messagesPost">
                            {% for message in salon.getContents() %}
                                <tr>
                                    <th class="tab-cells-name">
                                        <div>
                                            <span><a data-toggle="modal" data-target="#userModal" href="{{ path('user_profil_modal', {'idp': usePlanet.getId(), 'id': message.getUser().getId()}) }}" {% if message.getUser() == app.user %} class="text-vert"{% endif %}>{{ message.getUser().getUserName() }}</a></span> :  <span class="ml-2">{{ message.getMessage()|raw }}</span>
                                        </div>
                                    </th>
                                    <th width="125px" class="tab-cells-name cell-middle">
                                        <div>
                                            {{ message.getSendAt()|date('H:i:s d/m/Y ') }}
                                        </div>
                                    </th>
                                </tr>
                            {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% set form_message = formObject.createView %}
                    {% set action = path('salon_id', {'idp': usePlanet.getId(), 'salon': salon.getId()}) %}#}{#  ~ "#" ~ salon.getName() ~ "-tab"#}{#
                    {{ form_start(form_message,{attr: { action: action }}) }}
                    <div class="row">
                        <div class="col-10">
                            {{ form_widget(form_message.content) }}
                        </div>
                        <div class="col-2 float-left">
                            {{ form_widget(form_message.sendForm,{attr: { class: 'btn btn-sm btn-info'}}) }}
                        </div>
                    </div>
                    {{ form_end(form_message) }}
                    {%  set isAlly = 'no' %}
                    {% for sAlly in salon.getAllys() %}
                        {% if sAlly == app.user.getAlly() %}
                            {%  set isAlly = 'yes' %}
                        {% endif %}
                    {% endfor %}
                    {% if salon.getId() != 1 and isAlly == 'no' %}<span class="float-right mt-3"><a href="{{ path('ally_leave_salon', {'idp': usePlanet.getId(), 'id': salon.getId()}) }}">{{ 'salon.close'|trans }}</a></span>{% endif %}
                </div>
                {% set x = 1 %}
            {% endfor %}
        </div>
    </div>
    <div class="modal fade" id="userModal" tabindex="-1" role="dialog" aria-labelledby="userModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
            <div class="modal-content special">
            </div>
        </div>
    </div>
{% endblock %}

/**
* @Route("/salon/{idp}", name="salon", requirements={"idp"="\d+"})
* @Route("/salon/{idp}/{salon}", name="salon_id", requirements={"idp"="\d+"})
*/
public function salonAction(Request $request, $idp, $salon = 1)
{
$em = $this->getDoctrine()->getManager();
$user = $this->getUser();
$now = new DateTime();
$now->setTimezone(new DateTimeZone('Europe/Paris'));

if($user->getGameOver()) {
return $this->redirectToRoute('game_over');
}

$usePlanet = $em->getRepository('App:Planet')
->createQueryBuilder('p')
->where('p.id = :id')
->andWhere('p.user = :user')
->setParameters(array('id' => $idp, 'user' => $user))
->getQuery()
->getOneOrNullResult();

if($user->getAlly()) {
$sigle = $user->getAlly()->getSigle();
} else {
$sigle = 'AKOUNAMATATA';
}

$salons = $em->getRepository('App:Salon')
->createQueryBuilder('s')
->leftJoin('s.allys', 'a')
->leftJoin('s.users', 'u')
->where('a.sigle = :sigle')
->orWhere('s.id = :id')
->orWhere('u.username = :user')
->setParameters(array('sigle' => $sigle, 'id' => 1, 'user' => $user->getUserName()))
->getQuery()
->getResult();

$form_message = $this->createForm(SalonType::class);
$form_message->handleRequest($request);

if($request->isXmlHttpRequest()) {
$attachSalon = $em->getRepository('App:Salon')
->createQueryBuilder('s')
->where('s.id = :id')
->setParameters(array('id' => $salon))
->getQuery()
->getOneOrNullResult();
/*if ($_POST) {
if ($_POST['newMessage'] != "") {
$message = new S_Content();
$message->setSalon($attachSalon);
$message->setMessage(nl2br($_POST['newMessage']));
$message->setSendAt($now);
$message->setUser($user);
$user->setSalonAt($now);

if (count($attachSalon->getContents()) > 50) {
$removeMessage = $em->getRepository('App:S_Content')
->createQueryBuilder('sc')
->orderBy('sc.sendAt', 'ASC')
->where('sc.salon = :attachSalon')
->setParameters(array('attachSalon' => $attachSalon))
->setMaxResults('10')
->getQuery()
->getResult();
foreach ($removeMessage as $oneMessage) {
$em->remove($oneMessage);
}
}
$em->persist($message);
$em->flush();
}
}*/

$newMessages = $em->getRepository('App:S_Content')
->createQueryBuilder('sc')
->orderBy('sc.sendAt', 'ASC')
->where('sc.salon = :attachSalon')
->andWhere('sc.user != :user')
->andWhere('sc.sendAt > :date')
->setParameters(array('attachSalon' => $attachSalon, 'user' => $user, 'date' => $user->getSalonAt()))
->setMaxResults('10')
->getQuery()
->getResult();

if($newMessages) {
$response = new JsonResponse();
$response->setData(
array(
'has_error' => false,
)
);
$user->setSalonAt($now);
$em->persist($user);
$em->flush();
return $response;
} else {
$response = new JsonResponse();
$response->setData(
array(
'has_error' => true,
)
);
return $response;
}
}

if ($form_message->isSubmitted() && $form_message->isValid() && ($user->getSalonBan() > $now || $user->getSalonBan() == null)) {
$attachSalon = $em->getRepository('App:Salon')
->createQueryBuilder('s')
->where('s.id = :id')
->setParameters(array('id' => $salon))
->getQuery()
->getOneOrNullResult();

$message = new S_Content();
$message->setSalon($attachSalon);
$message->setMessage(nl2br($form_message->get('content')->getData()));
$message->setSendAt($now);
$message->setUser($user);

if(count($attachSalon->getContents()) > 50) {
$removeMessage = $em->getRepository('App:S_Content')
->createQueryBuilder('sc')
->orderBy('sc.sendAt', 'ASC')
->where('sc.salon = :attachSalon')
->setParameters(array('attachSalon' => $attachSalon))
->setMaxResults('10')
->getQuery()
->getResult();
foreach($removeMessage as $oneMessage) {
$em->remove($oneMessage);
}
}
$userViews = $em->getRepository('App:User')
->createQueryBuilder('u')
->where('u.id != :user')
->setParameters(array('user' => $user->getId()))
->getQuery()
->getResult();
foreach($userViews as $userView) {
$userView->setSalonAt(null);
$em->persist($userView);
}

$em->persist($message);

$form_message = null;
$form_message = $this->createForm(SalonType::class);
}
$user->setSalonAt($now);
$em->persist($user);
$em->flush();

return $this->render('connected/salon.html.twig', [
'usePlanet' => $usePlanet,
'salons' => $salons,
'formObject' => $form_message,
]);
}#}
